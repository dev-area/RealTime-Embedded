/* 
 * Copyright (c) 2010, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */
/*
 *  ======== mutex.cfg ========
 *
 */
/* Include function that helps minimize code and data footprint */
xdc.includeFile("sizing.cfg.xs");
/*
 * Use BASIC or MINIMAL footprint settings. Uncomment following
 * lines to reduce code and data footprint if needed. See sizing.cfg.xs for more
 * details
 */
//sizingConfig("BASIC");
//sizingConfig("MINIMAL");
 
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var SysStd = xdc.useModule('xdc.runtime.SysStd');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

/* Create default heap and hook it into Memory */
var heapMemParams = new HeapMem.Params;
var targName = Program.build.target.$name;
if (targName.indexOf("C28") != -1) {
    /* 
     * 28x targets have limited memory and require Task stacks to be placed
     * in memory entirely below the address 0x10000.
     * Setting 'sectionName' to '.taskStackSection' accomplishes this.   
     */
    heapMemParams.size = 0x800;
    var heap0 = HeapMem.create(heapMemParams);
    heap0.sectionName = ".taskStackSection";
}
else if (targName.indexOf("MSP430") != -1) {
    var heapMemParams = new HeapMem.Params;
    heapMemParams.size = 0x800;
    var heap0 = HeapMem.create(heapMemParams);
}
else {
    var heapMemParams = new HeapMem.Params;
    heapMemParams.size = 8192;
    var heap0 = HeapMem.create(heapMemParams);
}

Memory.defaultHeapInstance = heap0;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

/* Configure SysStd to send System_printfs to standard out */
System.SupportProxy = SysStd;

/*
 *  @(#) ti.sysbios.examples; 2, 0, 0, 0,45; 8-9-2010 11:59:53; /db/vtree/library/trees/avala/avala-n44x/src/
 */

